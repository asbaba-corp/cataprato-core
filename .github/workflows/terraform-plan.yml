name: "Terraform Plan"

on:
  workflow_call:
    inputs:
      config_directory:
        required: true
        type: string

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3     
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-${{ github.event.number }}
          path: dist
          
      - name: Terraform fmt
        id: fmt
        run: terraform fmt 
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
                
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          plan_info=""

          dir_count=`ls -l | grep "^d" | wc -l`
          
          if [ $dir_count -gt 0 ]; then
            plan_info="$(terraform plan -no-color)"
          else
            plan_info="$(terraform plan -no-color)"
          fi
          
          plan_info="${plan_info//'%'/'%25'}"
          plan_info="${plan_info//$'\n'/'%0A'}"
          plan_info="${plan_info//$'\r'/'%0D'}"
          
          echo "::set-output name=plan_info::$plan_info"

        continue-on-error: true
      
      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${{ steps.plan.outputs.plan_info }}
            \`\`\`
            </details>
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
