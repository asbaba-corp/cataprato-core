name: "Terraform Plan"

on:
  workflow_call:
    inputs:
      config_directory:
        required: true
        type: string

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TF_WORKSPACE: "cataprato-workspace"
      TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
      TF_CLOUD_ORGANIZATION: "Cataprato"

    steps:
      - name: Checkout
        uses: actions/checkout@v3     
      
     # - name: Setup Terraform
     #   uses: hashicorp/setup-terraform@v2
     #   with:
     #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-${{ github.event.number }}
          path: dist
          
      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ inputs.config_directory }}
          speculative: true
        
      - name: Plan Terraform
        id: plan-run
        continue-on-error: true
        run: |
         terraform init && terraform plan -input=false 
      
      - run: echo ${{steps.plan-run.outputs.payload}}
      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
                \`\`\`
                ${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}
                \`\`\`
                \`\`\`
                Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
                \`\`\`
                [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
                `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
